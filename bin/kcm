#!/usr/bin/env bash

set -o errtrace
set -o errexit

export kcm_home="${kcm_home:-${HOME}/.kcm}"
export kcm_env_home="$kcm_home/env"
export kcm_env_default="$kcm_env_home/system"
export chef_home="${chef_home:-${HOME}/.chef}"

# Echoes a non-blank string, if the provided 
# string only contains whitespace. 
#
str_is_blank() {
	echo "$1" | grep -q '^\s*$'; return $?
}

# Echoes the input string with leading 
# and ending whitespace removed
#
str_strip_whitespace() {
	echo $(echo "$1" | sed 's/^\s*//') | sed 's/\s*$//'
}

# Displays a message in a friendly green format, but only if
# the terminal supports colored output
info() {
	if ! tput setaf &> /dev/null
	then
		echo -e "$1"
	else
		echo -e "$(tput setaf 2)$1$(tput sgr0)"
	fi
}

# Displays a message in a mean looking red format, but only if
# the terminal supports colored output
error() {
	if ! tput setaf &> /dev/null
	then
		echo -e "$1" 1>&2
	else
		echo -e "$(tput setaf 1)$1$(tput sgr0)" 1>&2
	fi
}

# Set the generic error handler.  Most of time, we will try to detect
# errors, but if we do not, we want to know about them.
on_error() {
	error "Error at at line: $1"
}; trap 'on_error $LINENO' ERR


IFS=$'\n'

# List the current kcm environments in a 
# human readable form.
#
kcm_list() {
	info "** Current Environments **"
	echo 

	local list=($(kcm_list_string))
	local current=$(kcm_current)

	for dir in "${list[@]}"
	do
		if [ "$dir" == "$current" ]
		then
			info "$current *"
		else
			echo "$dir"
		fi
	done
}

# List the current kcm environments in
# a list of strings.  Each element will
# be separated by a newline.
# 
kcm_list_string() {
	local list=($(builtin cd "$kcm_env_home" ; find . -maxdepth 1 -mindepth 1 -type d -print | sed 's|\.\/||' | sort ))

	for dir in "${list[@]}"
	do
		echo "$dir"
	done
}

# Print the current kcm environment.
# 
kcm_current() {
	local current="$(kcm_current_string)" 

	if [[ "$current" == "" ]]
	then
		echo "Not using any environment."
		exit 1
	fi

	echo "$current"
}

# Print the current environment in a simple
# string form.  If the environment doesn't
# exist, then an empty string is printed.
# 
kcm_current_string() {
	if [[ ! -L "$chef_home" ]]
	then
		echo
		exit 0
	fi

	echo "$(readlink "$chef_home" | sed 's|\/\([^\/]\+\/\)*||')"
}

# Create a knew kcm environment
# 
kcm_create() {
	if [[ $# -ne 1 ]] || str_is_blank "$1"
	then
		error "Must supply a knife environment."
		exit 1
	fi

	local env=$(str_strip_whitespace "$1")

	if [[ -d  "$kcm_env_home/$env" ]]
	then
		error "That knife environment already exists."
		exit 1
	fi

	mkdir "$kcm_env_home/$env"
	info "Successfully created knife environment: $env"
	kcm_use "$env"
}

# Delete a kcm environment.
# 
kcm_delete() {
	if [[ $# -ne 1 ]] || str_is_blank "$1"
	then
		error "Must supply a knife environment."
		exit 1
	fi

	local env=$(str_strip_whitespace "$1")

	if [[ ! -d  "$kcm_env_home/$env" ]]
	then
		error "That knife environment does not exist."
		exit 1
	fi

	printf "Are you sure (y|n):" 
	read answer

	if [[ "$answer" != "y" ]] 
	then
		echo "Aborted"
		exit 0
	fi

	local current="$(kcm_current_string)" 
	if [[ "$current" == "$env" ]]
	then
		kcm_unuse
	fi

	info "Deleting: $env"
	rm -fr "$kcm_env_home/$env"
}

# Set a kcm environment as the one currently 
# being used.
# 
kcm_use() {
	if [[ $# -ne 1 ]] || str_is_blank "$1"
	then
		error "Must supply a knife environment."
		exit 1
	fi

	local env=$(str_strip_whitespace "$1")

	if [[ ! -d  "$kcm_env_home/$env" ]]
	then
		error "That knife environment does not exist."
		exit 1
	fi

	kcm_unuse 

	ln -s "$kcm_env_home/$env" "$chef_home"
	info "Now using knife environment: $env"
}

# Don't use any kcm environments
# 
kcm_unuse() {
	if [[ -L $chef_home ]]
	then
		rm $chef_home &> /dev/null
	fi
}

# Get the info about the current environment
#
kcm_info() {
	local current=$(kcm_current_string)
	if [[ "$current" == "" ]] 
	then 
		error "Not using any environment."
		exit 1
	fi 

	info "$current"
	if [[ ! -f  "$chef_home/knife.rb" ]]
	then
		error "This environment has not been configured."
		exit 1
	fi

	cat "$chef_home/knife.rb"
}


kcm_help() {
	info "** Kcm Help **"
	echo

	methods=( list )
	for method in "${methods[@]}" 
	do
		echo "kcm $method"
	done

	echo

	methods=( use create delete )
	for method in "${methods[@]}" 
	do
		echo "kcm $method NAME"
	done

	echo

	methods=( info current unuse )
	for method in "${methods[@]}" 
	do
		echo "kcm $method"
	done

}

(
	if [[ ! -d $kcm_env_home ]]
	then
		mkdir -p $kcm_env_home
	fi

	if [[ ! -d $kcm_env_default ]]
	then
		mkdir -p $kcm_env_default
	fi

	# If the current chef home isn't a symlink, then 
	# we need to store its contents into the "system"
	# environment
	if [[ -d "$chef_home" && ! -L "$chef_home" ]]
	then
		files=($(builtin cd "$chef_home" ; find . -maxdepth 1 -mindepth 1 -print | sed "s/^\.\///" )) 
		for file in "${files[@]}"
		do
			$(builtin cd "$chef_home" ; mv "$file" "$kcm_env_home/system/$file")
		done
	fi
) || error "Error migration current configuration."

args=($*)
action="${args[0]}"

case "$action" in
	list|current|unuse|create|delete|use|info)
		shift
		kcm_$action "$@"
		;;
	help|-h|--help)
		shift
		kcm_help "$@"
		;;
	*)
		error "That sub-command is not supported."
		echo

		kcm_help
		exit 1
		;;
esac

exit $?
