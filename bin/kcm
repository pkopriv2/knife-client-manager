#!/usr/bin/env bash

export kcm_version="1.0.4"
export kcm_home="${kcm_home:-${HOME}/.kcm}"
export kcm_env_home="$kcm_home/env"
export kcm_env_default="$kcm_env_home/system"
export chef_home="${chef_home:-${HOME}/.chef}"

set -o errtrace
set -o errexit

require 'lib/console.sh'
require 'lib/env.sh'

# create all the directories.
[[ -d $kcm_env_home ]]        || mkdir -p $kcm_env_home
[[ -d $kcm_env_home/system ]] || mkdir -p $kcm_env_home/system

# migrate any existing knife configuration.
(
	if [[ -d "$chef_home" && ! -L "$chef_home" ]]
	then
		read -p "A chef directory already exists.  Would you like kcm to migrate it (y|n):" answer
		if [[ "$answer" != "y" ]]
		then
			echo 'Please migrate or remove the directory before using kcm.'
			exit 1
		fi

		env_migrate
		exit $?
	fi
) || exit 1 


kcm_help() {
	bold "KCM HELP"
	echo 

	printf "%s\n" '
	Knife-client-manager is a tool to manage multiple knife configurations
	from a single workstation.
'

	bold "COMMANDS"
	echo

	for command in $project_root/commands/*.sh
	do
		source $command

		cmd=$(basename $command)
		cmd=${cmd/.sh/}

		printf "\t"; "$cmd"_usage "$@" 
	done
	echo 

	bold 'MORE INFO'
	printf "%s\n" '
	To get more detailed help, simply type kcm <command> help.

'
}

kcm_version() {
	bold "KCM VERSION"

	printf "%s\n" "
	$kcm_version
"
}

args=( "${@}" )
action="${args[0]}"

if [[ -z $action ]] 
then
	kcm_help
	exit $?
fi
shift

if [[ ! -f $project_root/commands/$action.sh ]]
then
	case "$action" in
		help|-h|--help)
			kcm_help 
			;;
		version|-v|--version)
			kcm_version
			;;
		*)
			error "That sub-command is not supported."
			echo
			kcm_help
			;;
	esac

	exit $?
fi

require "commands/$action.sh"
$action "$@"
exit $?
